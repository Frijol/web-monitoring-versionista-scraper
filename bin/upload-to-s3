#!/usr/bin/env node
'use strict';

const sentryErrors = require('../lib/sentry-errors').setup();

const path = require('path');
const stream = require('stream');
const fs = require('fs');
const klaw = require('klaw');
const mime = require('mime-types');
const neodoc = require('neodoc');
const parallel = require('parallel-transform');
const pump = require('pump');
const S3 = require('aws-sdk/clients/s3');

const args = neodoc.run(`
Uploads a directory's contents to an Amazon S3 bucket.

Usage: upload-to-s3 [options] <bucket> <path>

Options:
  -h, --help        Print this lovely help message.
  --key KEY         AWS access key [env: AWS_S3_KEY]
  --secret SECRET   AWS secret key [env: AWS_S3_SECRET]
  --prefix PREFIX   Prefix to add to the keys all objects uploaded to S3
  --throughput NUM  Maximum number of simultaneous file uploads [default: 10]
`);


// register custom mime types
mime.types['jsonl'] = 'application/json';

const s3 = new S3({
  accessKeyId: args['--key'],
  secretAccessKey: args['--secret']
});

const throughput = args['--throughput'];
const basePath = args['<path>'];
const prefix = args['--prefix'] || '';
const startDate = Date.now();

function uploadFile (file, callback) {
  const objectKey = `${prefix}${path.relative(basePath, file.path)}`;
  s3.upload({
    Bucket: args['<bucket>'],
    ACL: 'public-read',
    ContentType: mime.lookup(file.path) || 'application/octet-stream',
    Key: objectKey,
    Body: fs.createReadStream(file.path)
  }, (error, result) => callback(error));
}

pump(
  klaw(basePath),
  // skip hidden files, directories (we still hit the files they contain)
  filterStream(file => {
    return path.basename(file.path)[0] !== '.' && !file.stats.isDirectory();
  }),
  // handle metadata-* files last
  deferStreamItems(file => path.basename(file.path).startsWith('metadata-')),
  parallel(throughput, retryable(uploadFile)),
  error => {
    console.error(`Completed in ${(Date.now() - startDate) / 1000} seconds.`);

    if (error) {
      console.error(error);
      sentryErrors.captureException(error).then(() => process.exit(1));
    }
  });




// HELPERS -----------------

function retryable (operation, retryDelay = 10000, maxRetries = 3) {
  return function (...args) {
    const callback = args.pop();
    let tries = 1;

    const handleResult = (error, ...rest) => {
      if (error) {
        if (tries < maxRetries) {
          tries++;
          setTimeout(() => operation.apply(this, args), retryDelay);
          return;
        }
      }

      callback(error, ...rest);
    };

    args.push(handleResult);
    operation.apply(this, args);
  };
}

function filterStream (predicate) {
  return stream.Transform({
    objectMode: true,
    transform (data, encoding, callback) {
      try {
        if (predicate(data)) {
          this.push(data);
        }
        callback();
      }
      catch (error) {
        return callback(error);
      }
    }
  });
}

function deferStreamItems (predicate) {
  const deferred = [];

  return stream.Transform({
    objectMode: true,
    transform (data, encoding, callback) {
      try {
        if (predicate(data)) {
          deferred.push(data);
        }
        else {
          this.push(data);
        }
        callback();
      }
      catch (error) {
        return callback(error);
      }
    },
    flush (callback) {
      deferred.forEach(data => this.push(data));
      callback();
    }
  });
}
